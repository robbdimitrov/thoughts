// Code generated by protoc-gen-go. DO NOT EDIT.
// source: thoughts.proto

package thoughts

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Error struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{0}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DataRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Page                 int32    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataRequest) Reset()         { *m = DataRequest{} }
func (m *DataRequest) String() string { return proto.CompactTextString(m) }
func (*DataRequest) ProtoMessage()    {}
func (*DataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{1}
}

func (m *DataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataRequest.Unmarshal(m, b)
}
func (m *DataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataRequest.Marshal(b, m, deterministic)
}
func (m *DataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataRequest.Merge(m, src)
}
func (m *DataRequest) XXX_Size() int {
	return xxx_messageInfo_DataRequest.Size(m)
}
func (m *DataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataRequest proto.InternalMessageInfo

func (m *DataRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DataRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *DataRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *DataRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Identifiers struct {
	Ids                  []int32  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Identifiers) Reset()         { *m = Identifiers{} }
func (m *Identifiers) String() string { return proto.CompactTextString(m) }
func (*Identifiers) ProtoMessage()    {}
func (*Identifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{2}
}

func (m *Identifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Identifiers.Unmarshal(m, b)
}
func (m *Identifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Identifiers.Marshal(b, m, deterministic)
}
func (m *Identifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Identifiers.Merge(m, src)
}
func (m *Identifiers) XXX_Size() int {
	return xxx_messageInfo_Identifiers.Size(m)
}
func (m *Identifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_Identifiers.DiscardUnknown(m)
}

var xxx_messageInfo_Identifiers proto.InternalMessageInfo

func (m *Identifiers) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Status struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{3}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type AuthStatus struct {
	TokenType            string   `protobuf:"bytes,1,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	AccessToken          string   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken         string   `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	UserId               int32    `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId            int32    `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Error                *Error   `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthStatus) Reset()         { *m = AuthStatus{} }
func (m *AuthStatus) String() string { return proto.CompactTextString(m) }
func (*AuthStatus) ProtoMessage()    {}
func (*AuthStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{4}
}

func (m *AuthStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthStatus.Unmarshal(m, b)
}
func (m *AuthStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthStatus.Marshal(b, m, deterministic)
}
func (m *AuthStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthStatus.Merge(m, src)
}
func (m *AuthStatus) XXX_Size() int {
	return xxx_messageInfo_AuthStatus.Size(m)
}
func (m *AuthStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AuthStatus proto.InternalMessageInfo

func (m *AuthStatus) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *AuthStatus) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AuthStatus) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *AuthStatus) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthStatus) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *AuthStatus) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type UserStatus struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserStatus) Reset()         { *m = UserStatus{} }
func (m *UserStatus) String() string { return proto.CompactTextString(m) }
func (*UserStatus) ProtoMessage()    {}
func (*UserStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{5}
}

func (m *UserStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserStatus.Unmarshal(m, b)
}
func (m *UserStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserStatus.Marshal(b, m, deterministic)
}
func (m *UserStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserStatus.Merge(m, src)
}
func (m *UserStatus) XXX_Size() int {
	return xxx_messageInfo_UserStatus.Size(m)
}
func (m *UserStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UserStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UserStatus proto.InternalMessageInfo

func (m *UserStatus) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserStatus) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type PostStatus struct {
	Post                 *Post    `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostStatus) Reset()         { *m = PostStatus{} }
func (m *PostStatus) String() string { return proto.CompactTextString(m) }
func (*PostStatus) ProtoMessage()    {}
func (*PostStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{6}
}

func (m *PostStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostStatus.Unmarshal(m, b)
}
func (m *PostStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostStatus.Marshal(b, m, deterministic)
}
func (m *PostStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostStatus.Merge(m, src)
}
func (m *PostStatus) XXX_Size() int {
	return xxx_messageInfo_PostStatus.Size(m)
}
func (m *PostStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PostStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PostStatus proto.InternalMessageInfo

func (m *PostStatus) GetPost() *Post {
	if m != nil {
		return m.Post
	}
	return nil
}

func (m *PostStatus) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Credentials struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	UserAgent            string   `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Credentials) Reset()         { *m = Credentials{} }
func (m *Credentials) String() string { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()    {}
func (*Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{7}
}

func (m *Credentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Credentials.Unmarshal(m, b)
}
func (m *Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Credentials.Marshal(b, m, deterministic)
}
func (m *Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credentials.Merge(m, src)
}
func (m *Credentials) XXX_Size() int {
	return xxx_messageInfo_Credentials.Size(m)
}
func (m *Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_Credentials proto.InternalMessageInfo

func (m *Credentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Credentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Credentials) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Credentials) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type AuthRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{8}
}

func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (m *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(m, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UserRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRequest) Reset()         { *m = UserRequest{} }
func (m *UserRequest) String() string { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()    {}
func (*UserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{9}
}

func (m *UserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRequest.Unmarshal(m, b)
}
func (m *UserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRequest.Marshal(b, m, deterministic)
}
func (m *UserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRequest.Merge(m, src)
}
func (m *UserRequest) XXX_Size() int {
	return xxx_messageInfo_UserRequest.Size(m)
}
func (m *UserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserRequest proto.InternalMessageInfo

func (m *UserRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Users struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Users) Reset()         { *m = Users{} }
func (m *Users) String() string { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()    {}
func (*Users) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{10}
}

func (m *Users) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Users.Unmarshal(m, b)
}
func (m *Users) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Users.Marshal(b, m, deterministic)
}
func (m *Users) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Users.Merge(m, src)
}
func (m *Users) XXX_Size() int {
	return xxx_messageInfo_Users.Size(m)
}
func (m *Users) XXX_DiscardUnknown() {
	xxx_messageInfo_Users.DiscardUnknown(m)
}

var xxx_messageInfo_Users proto.InternalMessageInfo

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type UserUpdates struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Bio                  string   `protobuf:"bytes,5,opt,name=bio,proto3" json:"bio,omitempty"`
	OldPassword          string   `protobuf:"bytes,6,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	Token                string   `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserUpdates) Reset()         { *m = UserUpdates{} }
func (m *UserUpdates) String() string { return proto.CompactTextString(m) }
func (*UserUpdates) ProtoMessage()    {}
func (*UserUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{11}
}

func (m *UserUpdates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserUpdates.Unmarshal(m, b)
}
func (m *UserUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserUpdates.Marshal(b, m, deterministic)
}
func (m *UserUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdates.Merge(m, src)
}
func (m *UserUpdates) XXX_Size() int {
	return xxx_messageInfo_UserUpdates.Size(m)
}
func (m *UserUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdates proto.InternalMessageInfo

func (m *UserUpdates) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserUpdates) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserUpdates) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserUpdates) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserUpdates) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *UserUpdates) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

func (m *UserUpdates) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type User struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username             string   `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Email                string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Bio                  string   `protobuf:"bytes,5,opt,name=bio,proto3" json:"bio,omitempty"`
	Avatar               string   `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Posts                int32    `protobuf:"varint,7,opt,name=posts,proto3" json:"posts,omitempty"`
	Likes                int32    `protobuf:"varint,8,opt,name=likes,proto3" json:"likes,omitempty"`
	Following            int32    `protobuf:"varint,9,opt,name=following,proto3" json:"following,omitempty"`
	Followers            int32    `protobuf:"varint,10,opt,name=followers,proto3" json:"followers,omitempty"`
	DateCreated          string   `protobuf:"bytes,11,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{12}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetPosts() int32 {
	if m != nil {
		return m.Posts
	}
	return 0
}

func (m *User) GetLikes() int32 {
	if m != nil {
		return m.Likes
	}
	return 0
}

func (m *User) GetFollowing() int32 {
	if m != nil {
		return m.Following
	}
	return 0
}

func (m *User) GetFollowers() int32 {
	if m != nil {
		return m.Followers
	}
	return 0
}

func (m *User) GetDateCreated() string {
	if m != nil {
		return m.DateCreated
	}
	return ""
}

type Session struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserAgent            string   `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	UserId               int32    `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DateCreated          string   `protobuf:"bytes,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{13}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Session) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Session) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Session) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Session) GetDateCreated() string {
	if m != nil {
		return m.DateCreated
	}
	return ""
}

type Sessions struct {
	Sessions             []*Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Error                *Error     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Sessions) Reset()         { *m = Sessions{} }
func (m *Sessions) String() string { return proto.CompactTextString(m) }
func (*Sessions) ProtoMessage()    {}
func (*Sessions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{14}
}

func (m *Sessions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sessions.Unmarshal(m, b)
}
func (m *Sessions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sessions.Marshal(b, m, deterministic)
}
func (m *Sessions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sessions.Merge(m, src)
}
func (m *Sessions) XXX_Size() int {
	return xxx_messageInfo_Sessions.Size(m)
}
func (m *Sessions) XXX_DiscardUnknown() {
	xxx_messageInfo_Sessions.DiscardUnknown(m)
}

var xxx_messageInfo_Sessions proto.InternalMessageInfo

func (m *Sessions) GetSessions() []*Session {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *Sessions) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SessionRequest struct {
	SessionId            int32    `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionRequest) Reset()         { *m = SessionRequest{} }
func (m *SessionRequest) String() string { return proto.CompactTextString(m) }
func (*SessionRequest) ProtoMessage()    {}
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{15}
}

func (m *SessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionRequest.Unmarshal(m, b)
}
func (m *SessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionRequest.Marshal(b, m, deterministic)
}
func (m *SessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRequest.Merge(m, src)
}
func (m *SessionRequest) XXX_Size() int {
	return xxx_messageInfo_SessionRequest.Size(m)
}
func (m *SessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRequest proto.InternalMessageInfo

func (m *SessionRequest) GetSessionId() int32 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Post struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	UserId               int32    `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Likes                int32    `protobuf:"varint,4,opt,name=likes,proto3" json:"likes,omitempty"`
	Liked                bool     `protobuf:"varint,5,opt,name=liked,proto3" json:"liked,omitempty"`
	Retweets             int32    `protobuf:"varint,6,opt,name=retweets,proto3" json:"retweets,omitempty"`
	Retweeted            bool     `protobuf:"varint,7,opt,name=retweeted,proto3" json:"retweeted,omitempty"`
	DateCreated          string   `protobuf:"bytes,8,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Post) Reset()         { *m = Post{} }
func (m *Post) String() string { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()    {}
func (*Post) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{16}
}

func (m *Post) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Post.Unmarshal(m, b)
}
func (m *Post) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Post.Marshal(b, m, deterministic)
}
func (m *Post) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Post.Merge(m, src)
}
func (m *Post) XXX_Size() int {
	return xxx_messageInfo_Post.Size(m)
}
func (m *Post) XXX_DiscardUnknown() {
	xxx_messageInfo_Post.DiscardUnknown(m)
}

var xxx_messageInfo_Post proto.InternalMessageInfo

func (m *Post) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Post) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Post) GetLikes() int32 {
	if m != nil {
		return m.Likes
	}
	return 0
}

func (m *Post) GetLiked() bool {
	if m != nil {
		return m.Liked
	}
	return false
}

func (m *Post) GetRetweets() int32 {
	if m != nil {
		return m.Retweets
	}
	return 0
}

func (m *Post) GetRetweeted() bool {
	if m != nil {
		return m.Retweeted
	}
	return false
}

func (m *Post) GetDateCreated() string {
	if m != nil {
		return m.DateCreated
	}
	return ""
}

type PostUpdates struct {
	PostId               int32    `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostUpdates) Reset()         { *m = PostUpdates{} }
func (m *PostUpdates) String() string { return proto.CompactTextString(m) }
func (*PostUpdates) ProtoMessage()    {}
func (*PostUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{17}
}

func (m *PostUpdates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostUpdates.Unmarshal(m, b)
}
func (m *PostUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostUpdates.Marshal(b, m, deterministic)
}
func (m *PostUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostUpdates.Merge(m, src)
}
func (m *PostUpdates) XXX_Size() int {
	return xxx_messageInfo_PostUpdates.Size(m)
}
func (m *PostUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_PostUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_PostUpdates proto.InternalMessageInfo

func (m *PostUpdates) GetPostId() int32 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *PostUpdates) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PostUpdates) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type Posts struct {
	Posts                []*Post  `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Posts) Reset()         { *m = Posts{} }
func (m *Posts) String() string { return proto.CompactTextString(m) }
func (*Posts) ProtoMessage()    {}
func (*Posts) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{18}
}

func (m *Posts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Posts.Unmarshal(m, b)
}
func (m *Posts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Posts.Marshal(b, m, deterministic)
}
func (m *Posts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Posts.Merge(m, src)
}
func (m *Posts) XXX_Size() int {
	return xxx_messageInfo_Posts.Size(m)
}
func (m *Posts) XXX_DiscardUnknown() {
	xxx_messageInfo_Posts.DiscardUnknown(m)
}

var xxx_messageInfo_Posts proto.InternalMessageInfo

func (m *Posts) GetPosts() []*Post {
	if m != nil {
		return m.Posts
	}
	return nil
}

type PostRequest struct {
	PostId               int32    `protobuf:"varint,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostRequest) Reset()         { *m = PostRequest{} }
func (m *PostRequest) String() string { return proto.CompactTextString(m) }
func (*PostRequest) ProtoMessage()    {}
func (*PostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1424e5e5995dee6, []int{19}
}

func (m *PostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PostRequest.Unmarshal(m, b)
}
func (m *PostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PostRequest.Marshal(b, m, deterministic)
}
func (m *PostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostRequest.Merge(m, src)
}
func (m *PostRequest) XXX_Size() int {
	return xxx_messageInfo_PostRequest.Size(m)
}
func (m *PostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PostRequest proto.InternalMessageInfo

func (m *PostRequest) GetPostId() int32 {
	if m != nil {
		return m.PostId
	}
	return 0
}

func (m *PostRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*Error)(nil), "thoughts.Error")
	proto.RegisterType((*DataRequest)(nil), "thoughts.DataRequest")
	proto.RegisterType((*Identifiers)(nil), "thoughts.Identifiers")
	proto.RegisterType((*Status)(nil), "thoughts.Status")
	proto.RegisterType((*AuthStatus)(nil), "thoughts.AuthStatus")
	proto.RegisterType((*UserStatus)(nil), "thoughts.UserStatus")
	proto.RegisterType((*PostStatus)(nil), "thoughts.PostStatus")
	proto.RegisterType((*Credentials)(nil), "thoughts.Credentials")
	proto.RegisterType((*AuthRequest)(nil), "thoughts.AuthRequest")
	proto.RegisterType((*UserRequest)(nil), "thoughts.UserRequest")
	proto.RegisterType((*Users)(nil), "thoughts.Users")
	proto.RegisterType((*UserUpdates)(nil), "thoughts.UserUpdates")
	proto.RegisterType((*User)(nil), "thoughts.User")
	proto.RegisterType((*Session)(nil), "thoughts.Session")
	proto.RegisterType((*Sessions)(nil), "thoughts.Sessions")
	proto.RegisterType((*SessionRequest)(nil), "thoughts.SessionRequest")
	proto.RegisterType((*Post)(nil), "thoughts.Post")
	proto.RegisterType((*PostUpdates)(nil), "thoughts.PostUpdates")
	proto.RegisterType((*Posts)(nil), "thoughts.Posts")
	proto.RegisterType((*PostRequest)(nil), "thoughts.PostRequest")
}

func init() { proto.RegisterFile("thoughts.proto", fileDescriptor_f1424e5e5995dee6) }

var fileDescriptor_f1424e5e5995dee6 = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x06, 0x25, 0x52, 0xa2, 0x86, 0x96, 0xe3, 0x12, 0x4e, 0x43, 0x18, 0x0d, 0xea, 0x30, 0x29,
	0xe0, 0x4b, 0x02, 0x54, 0xa9, 0xed, 0x14, 0x2d, 0x50, 0x18, 0x49, 0x6c, 0x08, 0xcd, 0xc1, 0xa0,
	0xe3, 0xa4, 0x37, 0x97, 0x11, 0xc7, 0x36, 0x61, 0x8a, 0x54, 0xb9, 0x2b, 0x1b, 0xe9, 0x0b, 0xb4,
	0xd7, 0xbe, 0x4e, 0x1f, 0xa3, 0x97, 0xbe, 0x43, 0x81, 0x1e, 0xf2, 0x06, 0xc5, 0xec, 0x0f, 0xb5,
	0x12, 0x25, 0x5b, 0xea, 0x4d, 0x33, 0xbb, 0x33, 0x3b, 0xf3, 0xed, 0x37, 0xdf, 0x52, 0xb0, 0xce,
	0x2f, 0x8b, 0xf1, 0xc5, 0x25, 0x67, 0xcf, 0x46, 0x65, 0xc1, 0x0b, 0xdf, 0xd5, 0x76, 0xf8, 0x23,
	0x38, 0xaf, 0xcb, 0xb2, 0x28, 0x7d, 0x1f, 0xec, 0x41, 0x91, 0x60, 0x60, 0x6d, 0x5b, 0x3b, 0x4e,
	0x24, 0x7e, 0xfb, 0x9b, 0xe0, 0x20, 0x2d, 0x06, 0x8d, 0x6d, 0x6b, 0xa7, 0x13, 0x49, 0xc3, 0x0f,
	0xa0, 0x3d, 0x44, 0xc6, 0xe2, 0x0b, 0x0c, 0x9a, 0xc2, 0xaf, 0xcd, 0xf0, 0x1c, 0xbc, 0x57, 0x31,
	0x8f, 0x23, 0xfc, 0x65, 0x8c, 0x8c, 0xfb, 0x0f, 0xa0, 0x3d, 0x66, 0x58, 0x9e, 0xa5, 0x89, 0xca,
	0xda, 0x22, 0xb3, 0x9f, 0x50, 0x5e, 0x5e, 0x5c, 0x61, 0xae, 0xf3, 0x0a, 0x83, 0x2a, 0x18, 0xe9,
	0xa4, 0x4e, 0x24, 0x7e, 0xd3, 0xce, 0x2c, 0x1d, 0xa6, 0x3c, 0xb0, 0x85, 0x53, 0x1a, 0xe1, 0x97,
	0xe0, 0xf5, 0x13, 0xcc, 0x79, 0x7a, 0x9e, 0x62, 0xc9, 0xfc, 0x0d, 0x68, 0xa6, 0x09, 0x0b, 0xac,
	0xed, 0xe6, 0x8e, 0x13, 0xd1, 0xcf, 0xb0, 0x0f, 0xad, 0x13, 0x1e, 0xf3, 0x31, 0x33, 0x8b, 0xb5,
	0xa6, 0x8a, 0xf5, 0xbf, 0x32, 0x9b, 0xf3, 0x7a, 0xf7, 0x9e, 0x55, 0x18, 0x09, 0x40, 0x54, 0xb7,
	0xe1, 0x5f, 0x16, 0xc0, 0xc1, 0x98, 0x5f, 0xaa, 0x7c, 0x0f, 0x01, 0x44, 0xb5, 0x67, 0xfc, 0xe3,
	0x48, 0xa7, 0xec, 0x08, 0xcf, 0xdb, 0x8f, 0x23, 0xf4, 0x1f, 0xc1, 0x5a, 0x3c, 0x18, 0x20, 0x63,
	0x67, 0x66, 0x83, 0x9e, 0xf4, 0xbd, 0x15, 0x6d, 0x3e, 0x86, 0x6e, 0x89, 0xe7, 0x25, 0xb2, 0x4b,
	0xb5, 0x47, 0x82, 0xb8, 0xa6, 0x9c, 0x72, 0x93, 0x01, 0x9d, 0x3d, 0x05, 0xdd, 0x43, 0x00, 0x86,
	0x8c, 0xa5, 0x45, 0x4e, 0x6b, 0x8e, 0x58, 0xeb, 0x28, 0x4f, 0x3f, 0x99, 0x34, 0xd5, 0xba, 0xb5,
	0xa9, 0xf7, 0x00, 0xa7, 0x0c, 0x4b, 0xd5, 0x53, 0x08, 0x36, 0x65, 0x17, 0xdd, 0x78, 0xbd, 0xf5,
	0x49, 0x0c, 0xed, 0x89, 0xc4, 0xda, 0xb2, 0x68, 0xbd, 0x07, 0x38, 0x2e, 0x18, 0x9f, 0x24, 0x1e,
	0x15, 0x8c, 0xd7, 0x13, 0xd3, 0x9e, 0x48, 0xac, 0x2d, 0x9b, 0xf8, 0x57, 0xf0, 0x5e, 0x96, 0x28,
	0x2e, 0x3d, 0xce, 0x98, 0xbf, 0x05, 0x2e, 0x95, 0x95, 0xc7, 0x43, 0x7d, 0x09, 0x95, 0x4d, 0x6b,
	0xa3, 0x98, 0xb1, 0x9b, 0xa2, 0x4c, 0x14, 0xfe, 0x95, 0x4d, 0xf0, 0x09, 0x5c, 0xe3, 0x0b, 0xcc,
	0xb9, 0x42, 0xbe, 0x43, 0x9e, 0x03, 0x72, 0x08, 0xc2, 0x0f, 0xe3, 0x34, 0x13, 0xa0, 0x13, 0xe1,
	0xc9, 0x08, 0x1f, 0x83, 0x47, 0x0c, 0xd0, 0xb4, 0xae, 0xd8, 0x6b, 0x19, 0xec, 0x0d, 0x7f, 0x02,
	0x4f, 0xc0, 0x75, 0x17, 0xf7, 0xcd, 0xca, 0x1b, 0x33, 0x95, 0x57, 0x99, 0x9b, 0x66, 0xe6, 0xa7,
	0xe0, 0x50, 0x66, 0xe6, 0x3f, 0x01, 0x87, 0xb6, 0x4a, 0xa6, 0xd7, 0x2f, 0x4a, 0x2e, 0x86, 0x7f,
	0x5a, 0xb2, 0x92, 0xd3, 0x51, 0x12, 0x73, 0xbc, 0x1d, 0xaa, 0xaa, 0xdf, 0x86, 0xd1, 0x2f, 0x0d,
	0xa2, 0xd8, 0x2d, 0xab, 0xb0, 0x6b, 0xa0, 0xda, 0x33, 0xa0, 0x6e, 0x40, 0xf3, 0x43, 0x5a, 0x08,
	0x32, 0x76, 0x22, 0xfa, 0x49, 0x63, 0x50, 0x64, 0xc9, 0x59, 0x15, 0xd1, 0x92, 0x63, 0x50, 0x64,
	0xc9, 0xb1, 0x0e, 0xaa, 0x7a, 0x6d, 0x9b, 0xbd, 0xfe, 0xd1, 0x00, 0x9b, 0x8a, 0xf7, 0xd7, 0xa1,
	0x51, 0x41, 0xd7, 0x48, 0xef, 0x84, 0x4d, 0x76, 0xd1, 0x9c, 0xd7, 0x85, 0x6d, 0x74, 0x51, 0xaf,
	0xf4, 0x73, 0x68, 0xc5, 0xd7, 0x31, 0x8f, 0x4b, 0x55, 0xa3, 0xb2, 0x28, 0x27, 0xd1, 0x93, 0x89,
	0xf2, 0x9c, 0x48, 0x1a, 0x52, 0x8e, 0xae, 0x90, 0x05, 0xae, 0x96, 0xa3, 0x2b, 0x64, 0xfe, 0x17,
	0xd0, 0x39, 0x2f, 0xb2, 0xac, 0xb8, 0x49, 0xf3, 0x8b, 0xa0, 0x23, 0x47, 0xb2, 0x72, 0x4c, 0x56,
	0xe9, 0xe6, 0xc0, 0x5c, 0xa5, 0x3b, 0x7d, 0x04, 0x6b, 0x74, 0x4d, 0x67, 0x83, 0x12, 0x63, 0x8e,
	0x49, 0xe0, 0x49, 0xa4, 0xc8, 0xf7, 0x52, 0xba, 0xc2, 0xdf, 0x2d, 0x68, 0x9f, 0xc8, 0x09, 0xaf,
	0xc1, 0xa2, 0x9b, 0x6c, 0x18, 0x4d, 0xde, 0xc1, 0xf1, 0x85, 0xd2, 0x32, 0x5b, 0x8a, 0x53, 0x2f,
	0xe5, 0x67, 0x70, 0x55, 0x25, 0xcc, 0x7f, 0x0a, 0xae, 0xd2, 0x1d, 0x4d, 0xc8, 0xcf, 0x26, 0x84,
	0x54, 0xbb, 0xa2, 0x6a, 0xcb, 0xb2, 0x73, 0xfe, 0x1a, 0xd6, 0x75, 0xac, 0x9a, 0xa4, 0x69, 0xc5,
	0xb3, 0x66, 0x15, 0x6f, 0xee, 0x5b, 0x42, 0xaa, 0x6d, 0x93, 0xc8, 0xd4, 0x00, 0x0b, 0xa0, 0x3d,
	0x28, 0x72, 0x4e, 0xc8, 0xc8, 0x00, 0x6d, 0x9a, 0xb8, 0x34, 0x67, 0x5f, 0x2b, 0x79, 0xe9, 0xb6,
	0x79, 0xe9, 0xca, 0x2b, 0x61, 0x72, 0xa5, 0x57, 0xd0, 0xb4, 0x44, 0x7e, 0x83, 0xc8, 0x99, 0x20,
	0x94, 0x13, 0x55, 0x36, 0x11, 0x41, 0xfd, 0xc6, 0x44, 0xd0, 0xca, 0x8d, 0x26, 0x8e, 0x1a, 0xfa,
	0x6e, 0x1d, 0xfd, 0x77, 0xe0, 0x51, 0x4f, 0x7a, 0xb0, 0x1f, 0x40, 0x9b, 0x58, 0x69, 0x48, 0x0c,
	0x99, 0xfd, 0xdb, 0x7a, 0x5c, 0x28, 0x30, 0xc7, 0x82, 0xde, 0x4f, 0x34, 0xe9, 0x6b, 0x02, 0x23,
	0x04, 0x5b, 0x2e, 0x86, 0xdf, 0xcb, 0x32, 0x0c, 0xa5, 0x9b, 0x5f, 0xc6, 0xdc, 0x9b, 0xe9, 0xfd,
	0xa3, 0xe4, 0xe9, 0x04, 0xcb, 0xeb, 0x74, 0x80, 0xfe, 0x2e, 0x80, 0xec, 0x4f, 0x8c, 0xfd, 0xfd,
	0x69, 0x4d, 0x53, 0xad, 0x6e, 0x6d, 0x18, 0xcc, 0x92, 0x4f, 0xcb, 0x1e, 0xb4, 0x8f, 0x90, 0xcf,
	0x8b, 0x51, 0x75, 0x6d, 0x6d, 0x4e, 0xbb, 0x55, 0xdc, 0x2e, 0x80, 0x4c, 0xba, 0xda, 0x71, 0xbb,
	0x00, 0xaf, 0x30, 0xc3, 0xf9, 0x61, 0xfa, 0xc4, 0x5a, 0x58, 0xef, 0x53, 0x03, 0xba, 0x87, 0x62,
	0xd6, 0x75, 0xbb, 0x7b, 0xb0, 0x76, 0x84, 0xfc, 0xb0, 0x52, 0x07, 0x23, 0x95, 0xf1, 0xe9, 0xb4,
	0x75, 0x6f, 0xfa, 0x04, 0xe6, 0xff, 0x00, 0xf7, 0xcc, 0xb8, 0x7e, 0xc2, 0x16, 0x55, 0x61, 0xb8,
	0xcd, 0x8f, 0x24, 0xf3, 0x60, 0xb2, 0xff, 0xcf, 0xc1, 0x58, 0xb2, 0xd5, 0x0f, 0xde, 0x05, 0x90,
	0xd1, 0x2b, 0x41, 0xe7, 0xef, 0xc3, 0xda, 0x69, 0x7e, 0xbe, 0x7a, 0x60, 0xef, 0x93, 0x25, 0x9f,
	0x6b, 0x8d, 0xf8, 0x37, 0xe0, 0xbc, 0x29, 0x2e, 0xd2, 0xdc, 0xcc, 0x60, 0x7c, 0x4a, 0x98, 0x3c,
	0x31, 0xbe, 0xf3, 0xf6, 0xa0, 0x1d, 0xc9, 0x0f, 0x32, 0x33, 0xce, 0xf8, 0x0c, 0x58, 0x10, 0xb7,
	0x0f, 0xee, 0xbb, 0x38, 0x4b, 0x89, 0x47, 0xab, 0x05, 0x7e, 0x07, 0x1b, 0x3a, 0xb0, 0x7a, 0x23,
	0x17, 0x54, 0x5c, 0xef, 0xf9, 0x37, 0xab, 0x92, 0x4d, 0xdd, 0xf6, 0x0b, 0xf0, 0x8e, 0x90, 0x57,
	0x6a, 0xbd, 0xa0, 0x16, 0xbf, 0x26, 0xd9, 0x54, 0x49, 0x57, 0x72, 0x5d, 0x3f, 0x3a, 0x41, 0x5d,
	0xd7, 0x17, 0xa2, 0xff, 0x77, 0x43, 0xaa, 0x83, 0x2e, 0xe3, 0x5b, 0x3d, 0xde, 0x42, 0x8d, 0xef,
	0x4f, 0x2b, 0x8a, 0x9e, 0xb7, 0xcd, 0x69, 0xf7, 0xd4, 0x88, 0xcf, 0x8b, 0x9b, 0x83, 0xa4, 0x11,
	0xf7, 0xb5, 0x88, 0x3b, 0x44, 0x4c, 0x96, 0x20, 0xb9, 0x14, 0xbe, 0x1e, 0xb8, 0xea, 0x28, 0xb6,
	0x74, 0xcc, 0x3e, 0x74, 0x8f, 0x90, 0xbf, 0x21, 0xd9, 0x5f, 0x2d, 0xb0, 0xd2, 0x92, 0xdb, 0x5a,
	0xab, 0x23, 0xfb, 0xaf, 0x05, 0xdd, 0x83, 0x01, 0x37, 0xae, 0xf8, 0x39, 0xb8, 0x74, 0xfc, 0x4a,
	0x69, 0x84, 0x00, 0xe6, 0xd9, 0xca, 0x61, 0x7b, 0xe0, 0x45, 0xf2, 0xad, 0x5a, 0x2d, 0xee, 0x05,
	0x74, 0x23, 0x1c, 0x16, 0xd7, 0xa8, 0xa2, 0x97, 0x8e, 0xfc, 0xd0, 0x12, 0x7f, 0x55, 0x9f, 0xff,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x49, 0x1e, 0xaa, 0xbc, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *UserUpdates, opts ...grpc.CallOption) (*Status, error)
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserStatus, error)
	UpdateUser(ctx context.Context, in *UserUpdates, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Status, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *UserUpdates, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserStatus, error) {
	out := new(UserStatus)
	err := c.cc.Invoke(ctx, "/thoughts.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UserUpdates, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	CreateUser(context.Context, *UserUpdates) (*Status, error)
	GetUser(context.Context, *UserRequest) (*UserStatus, error)
	UpdateUser(context.Context, *UserUpdates) (*Status, error)
	DeleteUser(context.Context, *UserRequest) (*Status, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) CreateUser(ctx context.Context, req *UserUpdates) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedUserServiceServer) GetUser(ctx context.Context, req *UserRequest) (*UserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedUserServiceServer) UpdateUser(ctx context.Context, req *UserUpdates) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserServiceServer) DeleteUser(ctx context.Context, req *UserRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*UserUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UserUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thoughts.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thoughts.proto",
}

// FollowServiceClient is the client API for FollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FollowServiceClient interface {
	GetFollowing(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Users, error)
	GetFollowingIds(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Identifiers, error)
	GetFollowers(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Users, error)
	GetFollowersIds(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Identifiers, error)
	FollowUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Status, error)
	UnfollowUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Status, error)
}

type followServiceClient struct {
	cc *grpc.ClientConn
}

func NewFollowServiceClient(cc *grpc.ClientConn) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) GetFollowing(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/thoughts.FollowService/GetFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowingIds(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Identifiers, error) {
	out := new(Identifiers)
	err := c.cc.Invoke(ctx, "/thoughts.FollowService/GetFollowingIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowers(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/thoughts.FollowService/GetFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetFollowersIds(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Identifiers, error) {
	out := new(Identifiers)
	err := c.cc.Invoke(ctx, "/thoughts.FollowService/GetFollowersIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) FollowUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.FollowService/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) UnfollowUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.FollowService/UnfollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServiceServer is the server API for FollowService service.
type FollowServiceServer interface {
	GetFollowing(context.Context, *DataRequest) (*Users, error)
	GetFollowingIds(context.Context, *UserRequest) (*Identifiers, error)
	GetFollowers(context.Context, *DataRequest) (*Users, error)
	GetFollowersIds(context.Context, *UserRequest) (*Identifiers, error)
	FollowUser(context.Context, *UserRequest) (*Status, error)
	UnfollowUser(context.Context, *UserRequest) (*Status, error)
}

// UnimplementedFollowServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFollowServiceServer struct {
}

func (*UnimplementedFollowServiceServer) GetFollowing(ctx context.Context, req *DataRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (*UnimplementedFollowServiceServer) GetFollowingIds(ctx context.Context, req *UserRequest) (*Identifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingIds not implemented")
}
func (*UnimplementedFollowServiceServer) GetFollowers(ctx context.Context, req *DataRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (*UnimplementedFollowServiceServer) GetFollowersIds(ctx context.Context, req *UserRequest) (*Identifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersIds not implemented")
}
func (*UnimplementedFollowServiceServer) FollowUser(ctx context.Context, req *UserRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (*UnimplementedFollowServiceServer) UnfollowUser(ctx context.Context, req *UserRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}

func RegisterFollowServiceServer(s *grpc.Server, srv FollowServiceServer) {
	s.RegisterService(&_FollowService_serviceDesc, srv)
}

func _FollowService_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.FollowService/GetFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowing(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowingIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowingIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.FollowService/GetFollowingIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowingIds(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.FollowService/GetFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowers(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetFollowersIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetFollowersIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.FollowService/GetFollowersIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetFollowersIds(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.FollowService/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).FollowUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.FollowService/UnfollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).UnfollowUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FollowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thoughts.FollowService",
	HandlerType: (*FollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFollowing",
			Handler:    _FollowService_GetFollowing_Handler,
		},
		{
			MethodName: "GetFollowingIds",
			Handler:    _FollowService_GetFollowingIds_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _FollowService_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowersIds",
			Handler:    _FollowService_GetFollowersIds_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _FollowService_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _FollowService_UnfollowUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thoughts.proto",
}

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthStatus, error)
	Refresh(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthStatus, error)
	Validate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthStatus, error)
	ValidatePassword(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Status, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthStatus, error) {
	out := new(AuthStatus)
	err := c.cc.Invoke(ctx, "/thoughts.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Refresh(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthStatus, error) {
	out := new(AuthStatus)
	err := c.cc.Invoke(ctx, "/thoughts.AuthService/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Validate(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthStatus, error) {
	out := new(AuthStatus)
	err := c.cc.Invoke(ctx, "/thoughts.AuthService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidatePassword(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.AuthService/ValidatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	Login(context.Context, *Credentials) (*AuthStatus, error)
	Refresh(context.Context, *AuthRequest) (*AuthStatus, error)
	Validate(context.Context, *AuthRequest) (*AuthStatus, error)
	ValidatePassword(context.Context, *Credentials) (*Status, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) Login(ctx context.Context, req *Credentials) (*AuthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAuthServiceServer) Refresh(ctx context.Context, req *AuthRequest) (*AuthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedAuthServiceServer) Validate(ctx context.Context, req *AuthRequest) (*AuthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedAuthServiceServer) ValidatePassword(ctx context.Context, req *Credentials) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePassword not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.AuthService/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Refresh(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.AuthService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Validate(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.AuthService/ValidatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidatePassword(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thoughts.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AuthService_Refresh_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _AuthService_Validate_Handler,
		},
		{
			MethodName: "ValidatePassword",
			Handler:    _AuthService_ValidatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thoughts.proto",
}

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionServiceClient interface {
	GetSessions(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Sessions, error)
	DeleteSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Status, error)
}

type sessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSessionServiceClient(cc *grpc.ClientConn) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) GetSessions(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Sessions, error) {
	out := new(Sessions)
	err := c.cc.Invoke(ctx, "/thoughts.SessionService/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) DeleteSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.SessionService/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
type SessionServiceServer interface {
	GetSessions(context.Context, *AuthRequest) (*Sessions, error)
	DeleteSession(context.Context, *SessionRequest) (*Status, error)
}

// UnimplementedSessionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSessionServiceServer struct {
}

func (*UnimplementedSessionServiceServer) GetSessions(ctx context.Context, req *AuthRequest) (*Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (*UnimplementedSessionServiceServer) DeleteSession(ctx context.Context, req *SessionRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.SessionService/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetSessions(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.SessionService/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).DeleteSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thoughts.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessions",
			Handler:    _SessionService_GetSessions_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SessionService_DeleteSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thoughts.proto",
}

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PostServiceClient interface {
	CreatePost(ctx context.Context, in *PostUpdates, opts ...grpc.CallOption) (*PostStatus, error)
	GetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostStatus, error)
	GetFeed(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Posts, error)
	GetPosts(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Posts, error)
	GetLikedPosts(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Posts, error)
	DeletePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error)
}

type postServiceClient struct {
	cc *grpc.ClientConn
}

func NewPostServiceClient(cc *grpc.ClientConn) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *PostUpdates, opts ...grpc.CallOption) (*PostStatus, error) {
	out := new(PostStatus)
	err := c.cc.Invoke(ctx, "/thoughts.PostService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostStatus, error) {
	out := new(PostStatus)
	err := c.cc.Invoke(ctx, "/thoughts.PostService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetFeed(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/thoughts.PostService/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPosts(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/thoughts.PostService/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetLikedPosts(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*Posts, error) {
	out := new(Posts)
	err := c.cc.Invoke(ctx, "/thoughts.PostService/GetLikedPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.PostService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
type PostServiceServer interface {
	CreatePost(context.Context, *PostUpdates) (*PostStatus, error)
	GetPost(context.Context, *PostRequest) (*PostStatus, error)
	GetFeed(context.Context, *DataRequest) (*Posts, error)
	GetPosts(context.Context, *DataRequest) (*Posts, error)
	GetLikedPosts(context.Context, *DataRequest) (*Posts, error)
	DeletePost(context.Context, *PostRequest) (*Status, error)
}

// UnimplementedPostServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (*UnimplementedPostServiceServer) CreatePost(ctx context.Context, req *PostUpdates) (*PostStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (*UnimplementedPostServiceServer) GetPost(ctx context.Context, req *PostRequest) (*PostStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (*UnimplementedPostServiceServer) GetFeed(ctx context.Context, req *DataRequest) (*Posts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (*UnimplementedPostServiceServer) GetPosts(ctx context.Context, req *DataRequest) (*Posts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (*UnimplementedPostServiceServer) GetLikedPosts(ctx context.Context, req *DataRequest) (*Posts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikedPosts not implemented")
}
func (*UnimplementedPostServiceServer) DeletePost(ctx context.Context, req *PostRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}

func RegisterPostServiceServer(s *grpc.Server, srv PostServiceServer) {
	s.RegisterService(&_PostService_serviceDesc, srv)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.PostService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*PostUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.PostService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.PostService/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetFeed(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.PostService/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPosts(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetLikedPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetLikedPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.PostService/GetLikedPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetLikedPosts(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.PostService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thoughts.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostService_GetPost_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _PostService_GetFeed_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _PostService_GetPosts_Handler,
		},
		{
			MethodName: "GetLikedPosts",
			Handler:    _PostService_GetLikedPosts_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostService_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thoughts.proto",
}

// ActionServiceClient is the client API for ActionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ActionServiceClient interface {
	LikePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error)
	UnlikePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error)
	RetweetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error)
	RemoveRetweet(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error)
}

type actionServiceClient struct {
	cc *grpc.ClientConn
}

func NewActionServiceClient(cc *grpc.ClientConn) ActionServiceClient {
	return &actionServiceClient{cc}
}

func (c *actionServiceClient) LikePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.ActionService/LikePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) UnlikePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.ActionService/UnlikePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) RetweetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.ActionService/RetweetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionServiceClient) RemoveRetweet(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/thoughts.ActionService/RemoveRetweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServiceServer is the server API for ActionService service.
type ActionServiceServer interface {
	LikePost(context.Context, *PostRequest) (*Status, error)
	UnlikePost(context.Context, *PostRequest) (*Status, error)
	RetweetPost(context.Context, *PostRequest) (*Status, error)
	RemoveRetweet(context.Context, *PostRequest) (*Status, error)
}

// UnimplementedActionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedActionServiceServer struct {
}

func (*UnimplementedActionServiceServer) LikePost(ctx context.Context, req *PostRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (*UnimplementedActionServiceServer) UnlikePost(ctx context.Context, req *PostRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikePost not implemented")
}
func (*UnimplementedActionServiceServer) RetweetPost(ctx context.Context, req *PostRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetweetPost not implemented")
}
func (*UnimplementedActionServiceServer) RemoveRetweet(ctx context.Context, req *PostRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRetweet not implemented")
}

func RegisterActionServiceServer(s *grpc.Server, srv ActionServiceServer) {
	s.RegisterService(&_ActionService_serviceDesc, srv)
}

func _ActionService_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.ActionService/LikePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).LikePost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_UnlikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).UnlikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.ActionService/UnlikePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).UnlikePost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_RetweetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).RetweetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.ActionService/RetweetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).RetweetPost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionService_RemoveRetweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServiceServer).RemoveRetweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thoughts.ActionService/RemoveRetweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServiceServer).RemoveRetweet(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thoughts.ActionService",
	HandlerType: (*ActionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikePost",
			Handler:    _ActionService_LikePost_Handler,
		},
		{
			MethodName: "UnlikePost",
			Handler:    _ActionService_UnlikePost_Handler,
		},
		{
			MethodName: "RetweetPost",
			Handler:    _ActionService_RetweetPost_Handler,
		},
		{
			MethodName: "RemoveRetweet",
			Handler:    _ActionService_RemoveRetweet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "thoughts.proto",
}
